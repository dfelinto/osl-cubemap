void cube_rotate(
    vector R,
    output float UV[2],
    int FaceId)
{
    float x, y, z;
    float L = sqrt(2.0) / 2.0;


    // create the normals to check against
    vector N1 = vector(  L, L,   0.0);
    vector N2 = vector( -L, L,   0.0);
    vector N3 = vector(0.0, L,   L);
    vector N4 = vector(0.0, L,  -L);
    vector N5 = vector(  L, 0.0, L);
    vector N6 = vector( -L, 0.0, L);

    R = normalize(R);

    int check1 = ceil(dot(N1, R)) >= 1 ? 1 : 0;
    int check2 = ceil(dot(N2, R)) >= 1 ? 1 : 0;
    int check3 = ceil(dot(N3, R)) >= 1 ? 1 : 0;
    int check4 = ceil(dot(N4, R)) >= 1 ? 1 : 0;
    int check5 = ceil(dot(N5, R)) >= 1 ? 1 : 0;
    int check6 = ceil(dot(N6, R)) >= 1 ? 1 : 0;

    // positive y
    if (check1 && check2 && check3 && check4)
    {
        // do nothing
        x = R[0];
        y = R[1];
        z = R[2];
        FaceId = 0;
    }
    // negative y
    else if (!check1 && !check2 && !check3 && !check4)
    {
        // rotate around x, 180 degrees
        x =  R[0];
        y = -R[1];
        z = -R[2];
        FaceId = 1;
    }
    // positive z
    else if (check5 && check6 && check3 && !check4)
    {
        // rotate around x, 90 degrees
        x =  R[0];
        y =  R[2];
        z = -R[1];
        FaceId = 2;
    }
    // negative z
    else if (!check5 && !check6 && !check3 && check4)
    {
        // rotate around x, -90 degrees
        x =  R[0];
        y = -R[2];
        z =  R[1];
        FaceId = 3;
    }
    // negative x
    else if (!check5 && check6 && !check1 && check2)
    {
        // rotate around z, -90 degrees
        x =  R[1];
        y = -R[0];
        z =  R[2];
        FaceId = 4;
    }
    // positive x
    else if (check5 && !check6 && check1 && !check2)
    {
        // rotate around z, 90 degrees
        x = -R[1];
        y =  R[0];
        z =  R[2];
        FaceId = 5;
    }
    else
    {
        // do nothing
        x = 0.0;
        y = 0.0;
        z = 0.0;
        FaceId = 6;
    }

    float S1 = atan2((x/y), sqrt(2.0));
    float S2 = 2.0 * asin(1.0 / sqrt(3.0));
    float S = 0.5 + (S1 / S2);
    float T = ( 1.0 + (asin(z) /
    ( asin(1.0 / (sqrt (2.0 + (x / y)*(x / y) ) ) ) ) ) ) / 2.0;

    UV[0] = S;
    UV[1] = T;
}

shader node_cubemap(
    string North = "",
    string South = "",
    string West = "",
    string East = "",
    string Zenith = "",
    string Nadir = "",
    output color Color = 0.0)
{
    float UV[2];
    int FaceId;

    cube_rotate(normalize(P), UV, FaceId);

    if (FaceId == 0) {
        Color = texture(West, UV[0], 1.0 - UV[1]);
    }
    else if (FaceId == 1) {
        Color = texture(East, 1.0 - UV[0], UV[1]);
    }
    else if (FaceId == 2) {
        Color = texture(Zenith, UV[1], UV[0]);
    }
    else if (FaceId == 3) {
        Color = texture(Nadir, 1.0 - UV[1], 1.0 - UV[0]);
    }
    else if (FaceId == 4) {
        Color = texture(South, UV[0], 1.0 - UV[1]);
    }
    else { // FaceId == 5
        Color = texture(North, UV[0], 1.0 - UV[1]);
    }
}
